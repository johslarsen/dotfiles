#!/bin/bash -
cr2tojpg() {
    for i in "$@"; do
        dcraw -c -a  -h "$i" | ppm2tiff -c jpeg "${i%.*}.jpg"
    done
}

ddgo() {
    w3m "https://duckduckgo.com/?q=$*"
}
rfc() {
    w3m "https://www.rfc-editor.org/rfc/rfc$1.html"
}

moviemerge() { # Merge two or more moviefile using mencoder (mplayer coder)
    [ $# -lt "3" ] && echo "Usage: #moviemerge output file1 file2 ..." || mencoder -oac copy -ovc copy -o "$@"
}

mp3() { # Convert everything to mp3
    for i in "$@"; do
        name=${i%.*}
        [ $OSTYPE == "linux-gnu" ] && acodec=libmp3lame || acodec=mp3
        ffmpeg -i "$i" -acodec $acodec -ac 2 -ab 320k -vn "$name.mp3"
    done
}

ogg() { # convert anything to ogg
    for i in "$@"; do
        name=${i%.*}
        ffmpeg -i "$i" -acodec libvorbis -ac 2 -ab 320k -vn "$name.ogg"
    done
}

mkvtoogg() { # extract ogg vorbis from mkv-file, assuming track 2 is ogg vorbis audio
    for i in "$@"; do
        name=${i%.*}
        mkvextract tracks "$i" "2:$name.ogg"
    done
}

wscreen() {
    screen -S "${2:-$1}" "$1"
}
sscreen() {
    ssh -Y -t $1 "LANG='$LANG' screen -rD $2"
    echo -n $'\a'
}
stmux() {
    ssh -Y -t $1 "LANG='$LANG' tmux attach-session -t $2"
    echo -n $'\a'
}
stmuxe() {
    ssh -Y -t $1 "LANG='$LANG' tmux attach-session -dt $2"
    echo -n $'\a'
}
sxclip() {
    clipboard=${2:-clipboard}
    ssh $1 "DISPLAY=:0 xclip -o -selection '$clipboard'" | xclip -i -selection "$clipboard"
}

cds() {
    cd "$(find "${1:-.}" -type d -not -path .git | fzf --preview 'ls {}')"
}
fw() {
    find -iname "*$1*"
}
fs() {
    find -iname "*$1"
}
fp() {
    find -iname "$1*"
}

gitrgrep() {
    for f in **/.git; do
        wd="$(dirname "$f")"
        git --git-dir="$f" --work-tree="$wd" grep --recurse-submodules "$@" | awk '$0="'"$wd"':"$0'
    done
}

qnl2x() {
    awk -v OFS="${OFS:-\\\\n}" -F${FS:-\"} 'NF%2==0{do{s=$0;getline;$0=s OFS $0} while (split($0,f,FS)%2 == 0)}1' "$@"
}
qcsv2csv() {
    fs=${FS:-,}
    tfs=${TFS:-$'\x1e'} # ASCII Record Separator
    qfs=${QFS:-?}
    xsv fmt -d $fs -t $tfs "$@" | sed "s/[$fs]/\\$qfs/g" | xsv fmt -d $tfs -t $fs
}
tsv() {
    xsv "$@" -d $'\t'
}
psv() {
    xsv "$@" -d '|'
}

remake() {
    local build=${BUILD:-build} build_type=${BUILD_TYPE:-Debug}
    local typed="$build-$build_type"
    ! [ -e "$build" ] || [ -L "$build" ] && ln -sfT "$(basename "$typed")" "$build"
    cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DCMAKE_BUILD_TYPE="$build_type" -G"${GENERATOR:-Ninja}" -S. -B"$typed" "$@"
}
bmake() {
    local build=${BUILD:-build}
    [ -d "$build" ] || remake && cmake --build "$build" -- -j$(nproc) "$@"
}
ncbmake() {
    local build=${BUILD:-build}
    local uncached="$build-uncached"
    [ -d "$build" ] || ln -s "$uncached" "$build"
    PATH=$(path_without PATH /usr/lib{,64}/ccache/bin) BUILD="$uncached" bmake "$@"
}
xmake() {
    local build=${BUILD:-build}
    local gcc="$build-gcc"
    [ -d "$build" ] || ln -s "$gcc" "$build"
    BUILD="$gcc" CC=gcc CXX=g++ bmake "$@" && BUILD="$build-clang" CC=clang CXX=clang++ bmake "$@"
}
btest() {
    CTEST_OUTPUT_ON_FAILURE=${CTEST_OUTPUT_ON_FAILURE:-1} ctest --test-dir "${BUILD:-build}" "$@"
}
atest() {
    local build=${BUILD:-build-asan}
    BUILD="$build" CC=${CC:-clang} CXX=${CXX:-clang++} CXXFLAGS=${CXXFLAGS:--fsanitize=undefined,address -fsanitize-coverage=trace-pc-guard -g3} CFLAGS=${CFLAGS:-$CXXFLAGS} LDFALGS=${LDFLAGS:-$CXXFLAGS} bmake && BUILD="$build" btest "$@"
}
ttest() {
    local build=${BUILD:-build-tsan}
    BUILD="$build" CC=${CC:-clang} CXX=${CXX:-clang++} CXXFLAGS=${CXXFLAGS:--fsanitize=undefined,thread -g3} CFLAGS=${CFLAGS:-$CXXFLAGS} LDFALGS=${LDFLAGS:-$CXXFLAGS} bmake && BUILD="$build" btest "$@"
}
btidy() {
    clang-tidy -p build/ "$@"
}
